# See ../docker-compose.yaml for host naming.
upstream ollama {
    server ollama:11434;
}

# See ../docker-compose.yaml for host naming.
upstream open-webui {
    server open-webui:8080;
}

server {
    listen 80;
    listen [::]:80;
    # My current machine. Rename this depending on your host machine and what
    # you set in your SSL certs.
    server_name localhost;

    # Redirect unencrypted http:// access to the HTTPS scheme.
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    # My current machine. Rename this depending on your host machine and what
    # you set in your SSL certs.
    server_name localhost;

    # These paths are mounted into the containerized nginx. See
    # ../docker-compose.yaml configuration for the origin of these paths.
    ssl_certificate /etc/ssl/certs/my-site.crt;
    ssl_certificate_key /etc/ssl/private/my-site.key;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # Generic "better" SSL parameters
    # See: https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1.2 TLSv1.3; # Requires nginx >= 1.13.0 else use TLSv1.2
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_ecdh_curve secp384r1;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Kitware DNS
    resolver 10.83.83.25 10.83.83.26 valid=300s;
    resolver_timeout 5s;

    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    location /ollama-server/ {
        rewrite ^/ollama-server/(.*)$ /$1 break;
        proxy_pass         http://ollama;
        proxy_redirect     off;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_buffer_size           128k;
        proxy_buffers               4 256k;
        proxy_busy_buffers_size     256k;
        proxy_connect_timeout 60s;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
    }

    location / {
        # Not currently sure how to make this work with a non-root location.
        proxy_pass         http://open-webui;
        proxy_redirect     off;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection "upgrade";
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_buffer_size           128k;
        proxy_buffers               4 256k;
        proxy_busy_buffers_size     256k;
        proxy_connect_timeout 60s;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        client_max_body_size 1G;
    }
}
